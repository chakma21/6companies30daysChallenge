class Solution {
    public int minMoves2(int[] nums) {
        Arrays.sort(nums);
         
        int median = nums[nums.length / 2];
       
        int moves = 0;
        for (int num : nums) {
            moves += Math.abs(num - median);
        }
        
        return moves;
 
        // List<Integer> list=new ArrayList<>();
        // HashMap<Integer, Integer> map=new HashMap<>();
        // for (int n:nums){
        //     list.add(n);
        //     map.put(n,map.getOrDefault(n,0)+1);
        // }
        // int c=0;
        // while(!map.values().contains(list.size())){
        //     for (int key : map.keySet()) {
        //         if (map.containsKey(key+1) ){
        //         map.put(key+1, map.get(key+1) + 1);
        //         map.put(key, map.get(key)-1);
        //         c++;
        //         }
        //         else if (map.containsKey(key-1) ){
        //         map.put(key-1, map.get(key-1) + 1);
        //         map.put(key, map.get(key)-1);
        //         c++;
        //         }

        //     }
        // }
        // return c;
    }
}
